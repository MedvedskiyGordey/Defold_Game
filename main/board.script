local blocksize = 108   -- Distance between block centers
local boardwidth        -- Number of columns
local boardheight       -- Number of rows
local win               -- Number of words per level
local x_edge            -- Indent by x
local y_edge            -- Indent by y
local po = true         -- Whether the button is pressed or is outside the board
local str = ""          -- A string with letters taken from a block
local word = {}         -- Word table
local count = 0         -- Total word count
local l = 0             -- Lock table index
local letter = {}       -- Letter table
local level             -- Level number
local second            -- Variable to call "well done" only once

function init(self)
	second = false
	self.board = {}     -- Block table
	self.lock = {}
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")
end

local function build_board(self) -- Function to create blocks
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	x_edge = (640 - boardwidth * blocksize)/2
	y_edge = (1136 - boardheight * blocksize)/2
	local i = 0
	for x = 0,boardwidth-1 do
		pos.x = x_edge + blocksize / 2 + blocksize * x
		self.board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = y_edge + blocksize / 2 + blocksize * y
			local id = factory.create("#bricksfactory", pos, nil, nil)

			self.board[x][y] = { id = id, x = x, y = y, dragging = dragging, one = 0, lc = false }
			self.board[x][y].dragging = false

			msg.post(self.board[x][y].id, "lab", {lab = ""..letter[i]..""})
			i = i + 1
		end
	end
end

function on_input(self, action_id, action)
	--block id calculation
	local x = math.floor((action.x - x_edge) / blocksize)
	local y = math.floor((action.y - y_edge) / blocksize)

	if x < 0 or x >= boardwidth or y < 0 or y >= tonumber(boardheight) or self.board[x][y] == nil then
		po = false
		return
	end
	-- write down which blocks are pressed
	if action_id == hash("touch") and self.board[x][y].one == 0 and self.board[x][y].lc == false then
		msg.post(self.board[x][y].id, "r_r")
		self.board[x][y].one = 1
		self.lock[l][0] = x
		self.lock[l][1] = y
		l = l + 1
	end
	if action_id == hash("touch") and action.value == 1 and self.board[x][y].lc == false then
		po = true
		msg.post(self.board[x][y].id, "rotate")
		self.board[x][y].dragging = true
	elseif action_id == hash("touch") and action.released and self.board[x][y].lc == false then
		po = false
		local i = 0
		local fal = false
		while true do
			if word[i] == str then -- comparing the resulting string with a table of words
				for x = 0, l - 1 do
					self.board[self.lock[x][0]][self.lock[x][1]].lc = true
					msg.post(self.board[self.lock[x][0]][self.lock[x][1]].id, "completed")
				end
				word[i] = nil -- comparing the resulting string with a table of words
				win = win - 1 -- reduction of remaining words
				break
			end
			i = i + 1
			if i >= count then
				break
			end
		end
		str = ""
		l = 0
	end
end

local function rot(self) -- returning blocks to the initial state
	for x = 0,boardwidth-1 do
		for y = 0,boardheight-1 do
			msg.post(self.board[x][y].id, "rotate_revers")
			self.board[x][y].dragging = false
			self.board[x][y].one = 0
		end
	end
end

function update(self, dt)
	if po == false then
		rot(self)
	end
	if win == 0 and second == false then
		--call a window with a button next
		msg.post("level_"..level..":/level#gui", "level_completed")
		second = true
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		build_board(self)
	end
	if message_id == hash("revers") then -- The word from the selected letters
		str = str .. message.mes
	end
	if message_id == hash("level_go") then -- Getting level number and reading specific files
		level = message.level

		local data = sys.load_resource("/assets/resources/words.txt") -- reading a file with words
		if data then
			local data_table = data
			local i = 0
			for w in string.gmatch(data, "%S+") do
				word[i] = w
				count = count + 1
				i = i + 1
			end
		end

		--reading a letter matrix file
		local data = sys.load_resource("/assets/resources/text"..level..".txt") 
		if data then
			local i = 0
			for w in string.gmatch(data, "%S+") do
				letter[i] = w
				i = i + 1
			end
		end

		--reading a file with the number of blocks and words per level
		i = 0
		local wh = {}
		local data = sys.load_resource("/assets/resources/level_prop"..level..".txt")
		if data then
			for w in string.gmatch(data, "%d+") do
				wh[i] = w
				i = i + 1
			end
			boardheight = tonumber(wh[0])
			boardwidth = boardheight
			win = tonumber(wh[1])
		end
		--creating tables inside the table equal to the number of blocks at the level
		for x = 0, (boardwidth * boardheight) - 1 do
			self.lock[x] = {}
		end
	end
end